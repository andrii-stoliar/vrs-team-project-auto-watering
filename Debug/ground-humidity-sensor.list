
ground-humidity-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003eb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008326  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002121  00000000  00000000  0000d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0000f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000685  00000000  00000000  0000fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3bc  00000000  00000000  000103ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf59  00000000  00000000  0002c7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a65da  00000000  00000000  00038702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000decdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000216c  00000000  00000000  000ded20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  000e0e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b40 	.word	0x08003b40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b40 	.word	0x08003b40

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08a      	sub	sp, #40	@ 0x28
 80001dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001de:	f107 031c 	add.w	r3, r7, #28
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
 80001f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001fa:	4b2e      	ldr	r3, [pc, #184]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 80001fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000200:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000202:	4b2c      	ldr	r3, [pc, #176]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000204:	2200      	movs	r2, #0
 8000206:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000208:	4b2a      	ldr	r3, [pc, #168]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800020e:	4b29      	ldr	r3, [pc, #164]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b27      	ldr	r3, [pc, #156]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800021a:	4b26      	ldr	r3, [pc, #152]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800021c:	2200      	movs	r2, #0
 800021e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000222:	4b24      	ldr	r3, [pc, #144]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000224:	2200      	movs	r2, #0
 8000226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800022a:	2201      	movs	r2, #1
 800022c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800022e:	4b21      	ldr	r3, [pc, #132]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000234:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000236:	2201      	movs	r2, #1
 8000238:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800023a:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800023c:	2200      	movs	r2, #0
 800023e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000242:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000244:	2204      	movs	r2, #4
 8000246:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000248:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800024a:	2200      	movs	r2, #0
 800024c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800024e:	4b19      	ldr	r3, [pc, #100]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000250:	2200      	movs	r2, #0
 8000252:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000254:	4817      	ldr	r0, [pc, #92]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000256:	f000 fc39 	bl	8000acc <HAL_ADC_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000260:	f000 f98a 	bl	8000578 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000264:	2300      	movs	r3, #0
 8000266:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000268:	f107 031c 	add.w	r3, r7, #28
 800026c:	4619      	mov	r1, r3
 800026e:	4811      	ldr	r0, [pc, #68]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 8000270:	f001 f87c 	bl	800136c <HAL_ADCEx_MultiModeConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800027a:	f000 f97d 	bl	8000578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000282:	2301      	movs	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4619      	mov	r1, r3
 800029a:	4806      	ldr	r0, [pc, #24]	@ (80002b4 <MX_ADC1_Init+0xdc>)
 800029c:	f000 fda8 	bl	8000df0 <HAL_ADC_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002a6:	f000 f967 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	3728      	adds	r7, #40	@ 0x28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028

080002b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80002d8:	d124      	bne.n	8000324 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002da:	4b14      	ldr	r3, [pc, #80]	@ (800032c <HAL_ADC_MspInit+0x74>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a13      	ldr	r2, [pc, #76]	@ (800032c <HAL_ADC_MspInit+0x74>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b11      	ldr	r3, [pc, #68]	@ (800032c <HAL_ADC_MspInit+0x74>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ee:	613b      	str	r3, [r7, #16]
 80002f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <HAL_ADC_MspInit+0x74>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <HAL_ADC_MspInit+0x74>)
 80002f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <HAL_ADC_MspInit+0x74>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800030a:	230a      	movs	r3, #10
 800030c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800030e:	2303      	movs	r3, #3
 8000310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000320:	f001 fa36 	bl	8001790 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000324:	bf00      	nop
 8000326:	3728      	adds	r7, #40	@ 0x28
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40021000 	.word	0x40021000

08000330 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b22      	ldr	r3, [pc, #136]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a21      	ldr	r2, [pc, #132]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 800034c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a1b      	ldr	r2, [pc, #108]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 8000364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <MX_GPIO_Init+0xa0>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2111      	movs	r1, #17
 800037a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037e:	f001 fb79 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2161      	movs	r1, #97	@ 0x61
 8000386:	4813      	ldr	r0, [pc, #76]	@ (80003d4 <MX_GPIO_Init+0xa4>)
 8000388:	f001 fb74 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800038c:	2311      	movs	r3, #17
 800038e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	4619      	mov	r1, r3
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a6:	f001 f9f3 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 80003aa:	2361      	movs	r3, #97	@ 0x61
 80003ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	4619      	mov	r1, r3
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <MX_GPIO_Init+0xa4>)
 80003c2:	f001 f9e5 	bl	8001790 <HAL_GPIO_Init>

}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	48000400 	.word	0x48000400

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003de:	f000 fb0f 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e2:	f000 f871 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e6:	f7ff ffa3 	bl	8000330 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003ea:	f7ff fef5 	bl	80001d8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80003ee:	f000 f99f 	bl	8000730 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcdInitialise(LCD_ORIENTATION3);
 80003f2:	20c0      	movs	r0, #192	@ 0xc0
 80003f4:	f003 f902 	bl	80035fc <lcdInitialise>
  lcdPutS("VRS 2019", lcdTextX(2), lcdTextY(1), decodeRgbValue(122, 122, 122), decodeRgbValue(55, 01, 51));
 80003f8:	2002      	movs	r0, #2
 80003fa:	f003 fb19 	bl	8003a30 <lcdTextX>
 80003fe:	4603      	mov	r3, r0
 8000400:	461c      	mov	r4, r3
 8000402:	2001      	movs	r0, #1
 8000404:	f003 fb25 	bl	8003a52 <lcdTextY>
 8000408:	4603      	mov	r3, r0
 800040a:	461d      	mov	r5, r3
 800040c:	227a      	movs	r2, #122	@ 0x7a
 800040e:	217a      	movs	r1, #122	@ 0x7a
 8000410:	207a      	movs	r0, #122	@ 0x7a
 8000412:	f003 faf1 	bl	80039f8 <decodeRgbValue>
 8000416:	4603      	mov	r3, r0
 8000418:	461e      	mov	r6, r3
 800041a:	2233      	movs	r2, #51	@ 0x33
 800041c:	2101      	movs	r1, #1
 800041e:	2037      	movs	r0, #55	@ 0x37
 8000420:	f003 faea 	bl	80039f8 <decodeRgbValue>
 8000424:	4603      	mov	r3, r0
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	4633      	mov	r3, r6
 800042a:	462a      	mov	r2, r5
 800042c:	4621      	mov	r1, r4
 800042e:	4824      	ldr	r0, [pc, #144]	@ (80004c0 <main+0xe8>)
 8000430:	f003 fb1d 	bl	8003a6e <lcdPutS>
  lcdPutS("Cvicenie 8", lcdTextX(2), lcdTextY(4), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8000434:	2002      	movs	r0, #2
 8000436:	f003 fafb 	bl	8003a30 <lcdTextX>
 800043a:	4603      	mov	r3, r0
 800043c:	461c      	mov	r4, r3
 800043e:	2004      	movs	r0, #4
 8000440:	f003 fb07 	bl	8003a52 <lcdTextY>
 8000444:	4603      	mov	r3, r0
 8000446:	461d      	mov	r5, r3
 8000448:	22ff      	movs	r2, #255	@ 0xff
 800044a:	21ff      	movs	r1, #255	@ 0xff
 800044c:	20ff      	movs	r0, #255	@ 0xff
 800044e:	f003 fad3 	bl	80039f8 <decodeRgbValue>
 8000452:	4603      	mov	r3, r0
 8000454:	461e      	mov	r6, r3
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	2000      	movs	r0, #0
 800045c:	f003 facc 	bl	80039f8 <decodeRgbValue>
 8000460:	4603      	mov	r3, r0
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	4633      	mov	r3, r6
 8000466:	462a      	mov	r2, r5
 8000468:	4621      	mov	r1, r4
 800046a:	4816      	ldr	r0, [pc, #88]	@ (80004c4 <main+0xec>)
 800046c:	f003 faff 	bl	8003a6e <lcdPutS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t state = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */
	  state ? lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(31, 0, 0)) : lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(0, 31, 0));
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00d      	beq.n	8000496 <main+0xbe>
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	201f      	movs	r0, #31
 8000480:	f003 faba 	bl	80039f8 <decodeRgbValue>
 8000484:	4603      	mov	r3, r0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2363      	movs	r3, #99	@ 0x63
 800048a:	2222      	movs	r2, #34	@ 0x22
 800048c:	214b      	movs	r1, #75	@ 0x4b
 800048e:	200a      	movs	r0, #10
 8000490:	f003 f9e0 	bl	8003854 <lcdFilledRectangle>
 8000494:	e00c      	b.n	80004b0 <main+0xd8>
 8000496:	2200      	movs	r2, #0
 8000498:	211f      	movs	r1, #31
 800049a:	2000      	movs	r0, #0
 800049c:	f003 faac 	bl	80039f8 <decodeRgbValue>
 80004a0:	4603      	mov	r3, r0
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2363      	movs	r3, #99	@ 0x63
 80004a6:	2222      	movs	r2, #34	@ 0x22
 80004a8:	214b      	movs	r1, #75	@ 0x4b
 80004aa:	200a      	movs	r0, #10
 80004ac:	f003 f9d2 	bl	8003854 <lcdFilledRectangle>
	  state ^= 1;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	f083 0301 	eor.w	r3, r3, #1
 80004b6:	71fb      	strb	r3, [r7, #7]
	  LL_mDelay(100);
 80004b8:	2064      	movs	r0, #100	@ 0x64
 80004ba:	f003 f82b 	bl	8003514 <LL_mDelay>
	  state ? lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(31, 0, 0)) : lcdFilledRectangle(10, 75, 34, 99, decodeRgbValue(0, 31, 0));
 80004be:	e7d9      	b.n	8000474 <main+0x9c>
 80004c0:	08003b58 	.word	0x08003b58
 80004c4:	08003b64 	.word	0x08003b64

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b096      	sub	sp, #88	@ 0x58
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004d2:	2228      	movs	r2, #40	@ 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fb05 	bl	8003ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
 80004fa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	2302      	movs	r3, #2
 80004fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2310      	movs	r3, #16
 8000506:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000508:	2302      	movs	r3, #2
 800050a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000510:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000514:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fac2 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000526:	f000 f827 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052a:	230f      	movs	r3, #15
 800052c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f002 faeb 	bl	8002b20 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000550:	f000 f812 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4618      	mov	r0, r3
 8000562:	f002 fcad 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800056c:	f000 f804 	bl	8000578 <Error_Handler>
  }
}
 8000570:	bf00      	nop
 8000572:	3758      	adds	r7, #88	@ 0x58
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

      while (1) {
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f023 0210 	bic.w	r2, r3, #16
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	431a      	orrs	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	605a      	str	r2, [r3, #4]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f043 0208 	orr.w	r2, r3, #8
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	605a      	str	r2, [r3, #4]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f023 0208 	bic.w	r2, r3, #8
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	605a      	str	r2, [r3, #4]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b01      	cmp	r3, #1
 800061c:	d101      	bne.n	8000622 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	2b02      	cmp	r3, #2
 8000642:	d101      	bne.n	8000648 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	330c      	adds	r3, #12
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	330c      	adds	r3, #12
 8000682:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	78fa      	ldrb	r2, [r7, #3]
 8000688:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	4907      	ldr	r1, [pc, #28]	@ (80006c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4013      	ands	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006d2:	699a      	ldr	r2, [r3, #24]
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006de:	699a      	ldr	r2, [r3, #24]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4013      	ands	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	619a      	str	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b090      	sub	sp, #64	@ 0x40
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	2228      	movs	r2, #40	@ 0x28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f9d1 	bl	8003ae6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000754:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000758:	f7ff ffb6 	bl	80006c8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800075c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000760:	f7ff ff9a 	bl	8000698 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000764:	23e0      	movs	r3, #224	@ 0xe0
 8000766:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000768:	2302      	movs	r3, #2
 800076a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000778:	2305      	movs	r3, #5
 800077a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f002 fdc7 	bl	8003316 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800078c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000790:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000792:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000796:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80007a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80007a6:	2320      	movs	r3, #32
 80007a8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007be:	f002 fe50 	bl	8003462 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80007c2:	2100      	movs	r1, #0
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007c6:	f7ff feed 	bl	80005a4 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007cc:	f7ff ff0d 	bl	80005ea <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR2 |= 1 << 12;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007da:	6053      	str	r3, [r2, #4]
  LL_SPI_EnableNSSPulseMgt(SPI1);
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007de:	f7ff fef4 	bl	80005ca <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 80007e2:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <MX_SPI1_Init+0xc0>)
 80007e4:	f7ff fece 	bl	8000584 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3740      	adds	r7, #64	@ 0x40
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013000 	.word	0x40013000

080007f4 <readWriteSPI1>:

/* USER CODE BEGIN 1 */
unsigned char readWriteSPI1(unsigned char txData)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	unsigned char rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	@ (8000838 <readWriteSPI1+0x44>)
 8000804:	f7ff ff35 	bl	8000672 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8000808:	bf00      	nop
 800080a:	480b      	ldr	r0, [pc, #44]	@ (8000838 <readWriteSPI1+0x44>)
 800080c:	f7ff ff10 	bl	8000630 <LL_SPI_IsActiveFlag_TXE>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d1f9      	bne.n	800080a <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8000816:	bf00      	nop
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <readWriteSPI1+0x44>)
 800081a:	f7ff fef6 	bl	800060a <LL_SPI_IsActiveFlag_RXNE>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d1f9      	bne.n	8000818 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <readWriteSPI1+0x44>)
 8000826:	f7ff ff16 	bl	8000656 <LL_SPI_ReceiveData8>
 800082a:	4603      	mov	r3, r0
 800082c:	73fb      	strb	r3, [r7, #15]

	return rxData;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40013000 	.word	0x40013000

0800083c <initCS_Pin>:

void initCS_Pin(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	set_cs();
 8000840:	f000 f802 	bl	8000848 <set_cs>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <set_cs>:

void set_cs()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800084c:	2120      	movs	r1, #32
 800084e:	4802      	ldr	r0, [pc, #8]	@ (8000858 <set_cs+0x10>)
 8000850:	f7ff ff52 	bl	80006f8 <LL_GPIO_SetOutputPin>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	48000400 	.word	0x48000400

0800085c <reset_cs>:

void reset_cs()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000860:	2120      	movs	r1, #32
 8000862:	4802      	ldr	r0, [pc, #8]	@ (800086c <reset_cs+0x10>)
 8000864:	f7ff ff56 	bl	8000714 <LL_GPIO_ResetOutputPin>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000400 	.word	0x48000400

08000870 <initCD_Pin>:

void initCD_Pin(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <set_cd>:

void set_cd() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	4802      	ldr	r0, [pc, #8]	@ (8000890 <set_cd+0x10>)
 8000888:	f7ff ff36 	bl	80006f8 <LL_GPIO_SetOutputPin>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400

08000894 <reset_cd>:

void reset_cd() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000898:	2140      	movs	r1, #64	@ 0x40
 800089a:	4802      	ldr	r0, [pc, #8]	@ (80008a4 <reset_cd+0x10>)
 800089c:	f7ff ff3a 	bl	8000714 <LL_GPIO_ResetOutputPin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	48000400 	.word	0x48000400

080008a8 <initRES_Pin>:

void initRES_Pin()
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <set_res>:

void set_res()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80008bc:	2101      	movs	r1, #1
 80008be:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <set_res+0x10>)
 80008c0:	f7ff ff1a 	bl	80006f8 <LL_GPIO_SetOutputPin>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000400 	.word	0x48000400

080008cc <reset_res>:

void reset_res()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80008d0:	2101      	movs	r1, #1
 80008d2:	4802      	ldr	r0, [pc, #8]	@ (80008dc <reset_res+0x10>)
 80008d4:	f7ff ff1e 	bl	8000714 <LL_GPIO_ResetOutputPin>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000400 	.word	0x48000400

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f885 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f003 f88d 	bl	8003af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fcfb 	bl	80003d8 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f0:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 80009f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f8:	2000007c 	.word	0x2000007c

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 fe89 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff ff60 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe93 	bl	8001776 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 fe69 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000078 	.word	0x20000078

08000ab4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000078 	.word	0x20000078

08000acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09a      	sub	sp, #104	@ 0x68
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d101      	bne.n	8000aec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e172      	b.n	8000dd2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d176      	bne.n	8000bec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d152      	bne.n	8000bac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fbc9 	bl	80002b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d13b      	bne.n	8000bac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 fcdf 	bl	80014f8 <ADC_Disable>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12f      	bne.n	8000bac <HAL_ADC_Init+0xe0>
 8000b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d12b      	bne.n	8000bac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b5c:	f023 0302 	bic.w	r3, r3, #2
 8000b60:	f043 0202 	orr.w	r2, r3, #2
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b76:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b86:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b88:	4b94      	ldr	r3, [pc, #592]	@ (8000ddc <HAL_ADC_Init+0x310>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a94      	ldr	r2, [pc, #592]	@ (8000de0 <HAL_ADC_Init+0x314>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9a      	lsrs	r2, r3, #18
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b9e:	e002      	b.n	8000ba6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f9      	bne.n	8000ba0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bc8:	d110      	bne.n	8000bec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f023 0312 	bic.w	r3, r3, #18
 8000bd2:	f043 0210 	orr.w	r2, r3, #16
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f040 80df 	bne.w	8000db8 <HAL_ADC_Init+0x2ec>
 8000bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 80da 	bne.w	8000db8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 80d2 	bne.w	8000db8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c1c:	f043 0202 	orr.w	r2, r3, #2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c24:	4b6f      	ldr	r3, [pc, #444]	@ (8000de4 <HAL_ADC_Init+0x318>)
 8000c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c30:	d102      	bne.n	8000c38 <HAL_ADC_Init+0x16c>
 8000c32:	4b6d      	ldr	r3, [pc, #436]	@ (8000de8 <HAL_ADC_Init+0x31c>)
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e002      	b.n	8000c3e <HAL_ADC_Init+0x172>
 8000c38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_ADC_Init+0x192>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <HAL_ADC_Init+0x192>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0x194>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11c      	bne.n	8000c9e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d010      	beq.n	8000c8c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d107      	bne.n	8000c86 <HAL_ADC_Init+0x1ba>
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <HAL_ADC_Init+0x1ba>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_ADC_Init+0x1bc>
 8000c86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d108      	bne.n	8000c9e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7e5b      	ldrb	r3, [r3, #25]
 8000ca2:	035b      	lsls	r3, r3, #13
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d002      	beq.n	8000cb2 <HAL_ADC_Init+0x1e6>
 8000cac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0x1e8>
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d11b      	bne.n	8000d0a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7e5b      	ldrb	r3, [r3, #25]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d109      	bne.n	8000cee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	045a      	lsls	r2, r3, #17
 8000ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cec:	e00d      	b.n	8000d0a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000cf6:	f043 0220 	orr.w	r2, r3, #32
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d007      	beq.n	8000d22 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d114      	bne.n	8000d5a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d3e:	f023 0302 	bic.w	r3, r3, #2
 8000d42:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7e1b      	ldrb	r3, [r3, #24]
 8000d48:	039a      	lsls	r2, r3, #14
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4313      	orrs	r3, r2
 8000d54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d56:	4313      	orrs	r3, r2
 8000d58:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <HAL_ADC_Init+0x320>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d10c      	bne.n	8000d90 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	f023 010f 	bic.w	r1, r3, #15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d8e:	e007      	b.n	8000da0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 020f 	bic.w	r2, r2, #15
 8000d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f023 0303 	bic.w	r3, r3, #3
 8000dae:	f043 0201 	orr.w	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000db6:	e00a      	b.n	8000dce <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f023 0312 	bic.w	r3, r3, #18
 8000dc0:	f043 0210 	orr.w	r2, r3, #16
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3768      	adds	r7, #104	@ 0x68
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	50000300 	.word	0x50000300
 8000de8:	50000100 	.word	0x50000100
 8000dec:	fff0c007 	.word	0xfff0c007

08000df0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b09b      	sub	sp, #108	@ 0x6c
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <HAL_ADC_ConfigChannel+0x22>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e2a1      	b.n	8001356 <HAL_ADC_ConfigChannel+0x566>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 8285 	bne.w	8001334 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d81c      	bhi.n	8000e6c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	461a      	mov	r2, r3
 8000e46:	231f      	movs	r3, #31
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4019      	ands	r1, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e6a:	e063      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	d81e      	bhi.n	8000eb2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	3b1e      	subs	r3, #30
 8000e88:	221f      	movs	r2, #31
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4019      	ands	r1, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	3b1e      	subs	r3, #30
 8000ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb0:	e040      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b0e      	cmp	r3, #14
 8000eb8:	d81e      	bhi.n	8000ef8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	3b3c      	subs	r3, #60	@ 0x3c
 8000ece:	221f      	movs	r2, #31
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	3b3c      	subs	r3, #60	@ 0x3c
 8000eea:	fa00 f203 	lsl.w	r2, r0, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef6:	e01d      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	3b5a      	subs	r3, #90	@ 0x5a
 8000f0c:	221f      	movs	r2, #31
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	4019      	ands	r1, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	3b5a      	subs	r3, #90	@ 0x5a
 8000f28:	fa00 f203 	lsl.w	r2, r0, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 80e5 	bne.w	800110e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	d91c      	bls.n	8000f86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6999      	ldr	r1, [r3, #24]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b1e      	subs	r3, #30
 8000f5e:	2207      	movs	r2, #7
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6898      	ldr	r0, [r3, #8]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	3b1e      	subs	r3, #30
 8000f78:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	e019      	b.n	8000fba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6959      	ldr	r1, [r3, #20]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	2207      	movs	r2, #7
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4019      	ands	r1, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6898      	ldr	r0, [r3, #8]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d84f      	bhi.n	800107c <HAL_ADC_ConfigChannel+0x28c>
 8000fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe4 <HAL_ADC_ConfigChannel+0x1f4>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08001017 	.word	0x08001017
 8000fec:	08001039 	.word	0x08001039
 8000ff0:	0800105b 	.word	0x0800105b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800126c <HAL_ADC_ConfigChannel+0x47c>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	0691      	lsls	r1, r2, #26
 8001004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001006:	430a      	orrs	r2, r1
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001012:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001014:	e07b      	b.n	800110e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800101c:	4b93      	ldr	r3, [pc, #588]	@ (800126c <HAL_ADC_ConfigChannel+0x47c>)
 800101e:	4013      	ands	r3, r2
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	0691      	lsls	r1, r2, #26
 8001026:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001028:	430a      	orrs	r2, r1
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001034:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001036:	e06a      	b.n	800110e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800103e:	4b8b      	ldr	r3, [pc, #556]	@ (800126c <HAL_ADC_ConfigChannel+0x47c>)
 8001040:	4013      	ands	r3, r2
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	0691      	lsls	r1, r2, #26
 8001048:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800104a:	430a      	orrs	r2, r1
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001056:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001058:	e059      	b.n	800110e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001060:	4b82      	ldr	r3, [pc, #520]	@ (800126c <HAL_ADC_ConfigChannel+0x47c>)
 8001062:	4013      	ands	r3, r2
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	0691      	lsls	r1, r2, #26
 800106a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800106c:	430a      	orrs	r2, r1
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001078:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800107a:	e048      	b.n	800110e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	069b      	lsls	r3, r3, #26
 800108c:	429a      	cmp	r2, r3
 800108e:	d107      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800109e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80010a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	069b      	lsls	r3, r3, #26
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d107      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010c2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	069b      	lsls	r3, r3, #26
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d107      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010e6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80010ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	069b      	lsls	r3, r3, #26
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d107      	bne.n	800110c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800110a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800110c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_ADC_ConfigChannel+0x33e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_ConfigChannel+0x33e>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_ADC_ConfigChannel+0x340>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 810a 	bne.w	800134a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d00f      	beq.n	800115e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2201      	movs	r2, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43da      	mvns	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	400a      	ands	r2, r1
 8001158:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800115c:	e049      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	409a      	lsls	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d91c      	bls.n	80011ba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6999      	ldr	r1, [r3, #24]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	3b1b      	subs	r3, #27
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	3b1b      	subs	r3, #27
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	e01b      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6959      	ldr	r1, [r3, #20]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	2207      	movs	r2, #7
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4019      	ands	r1, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6898      	ldr	r0, [r3, #8]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_ADC_ConfigChannel+0x480>)
 80011f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d105      	bne.n	800120a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001206:	2b00      	cmp	r3, #0
 8001208:	d015      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800120e:	2b11      	cmp	r3, #17
 8001210:	d105      	bne.n	800121e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001222:	2b12      	cmp	r3, #18
 8001224:	f040 8091 	bne.w	800134a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 808a 	bne.w	800134a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123e:	d102      	bne.n	8001246 <HAL_ADC_ConfigChannel+0x456>
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_ADC_ConfigChannel+0x484>)
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e002      	b.n	800124c <HAL_ADC_ConfigChannel+0x45c>
 8001246:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800124a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d10e      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x488>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x488>
 8001268:	2301      	movs	r3, #1
 800126a:	e006      	b.n	800127a <HAL_ADC_ConfigChannel+0x48a>
 800126c:	83fff000 	.word	0x83fff000
 8001270:	50000300 	.word	0x50000300
 8001274:	50000100 	.word	0x50000100
 8001278:	2300      	movs	r3, #0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d150      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800127e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d010      	beq.n	80012a6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x4b0>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x4b0>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x4b2>
 80012a0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13c      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b10      	cmp	r3, #16
 80012ac:	d11d      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x4fa>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012b6:	d118      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c4:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_ADC_ConfigChannel+0x574>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a27      	ldr	r2, [pc, #156]	@ (8001368 <HAL_ADC_ConfigChannel+0x578>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0c9a      	lsrs	r2, r3, #18
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012da:	e002      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f9      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012e8:	e02e      	b.n	8001348 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d10b      	bne.n	800130a <HAL_ADC_ConfigChannel+0x51a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012fa:	d106      	bne.n	800130a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80012fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001306:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001308:	e01e      	b.n	8001348 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b12      	cmp	r3, #18
 8001310:	d11a      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800131a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800131c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800131e:	e013      	b.n	8001348 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001332:	e00a      	b.n	800134a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001346:	e000      	b.n	800134a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001348:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001352:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001356:	4618      	mov	r0, r3
 8001358:	376c      	adds	r7, #108	@ 0x6c
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	431bde83 	.word	0x431bde83

0800136c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800136c:	b480      	push	{r7}
 800136e:	b099      	sub	sp, #100	@ 0x64
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001384:	d102      	bne.n	800138c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001386:	4b5a      	ldr	r3, [pc, #360]	@ (80014f0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	e002      	b.n	8001392 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800138c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001390:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0a2      	b.n	80014e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e09b      	b.n	80014e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d17f      	bne.n	80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d179      	bne.n	80014c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013cc:	4b49      	ldr	r3, [pc, #292]	@ (80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80013ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d040      	beq.n	800145a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80013d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013ea:	035b      	lsls	r3, r3, #13
 80013ec:	430b      	orrs	r3, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d108      	bne.n	8001414 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001414:	2300      	movs	r3, #0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d15c      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001436:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001438:	2b00      	cmp	r3, #0
 800143a:	d14b      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800143c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001444:	f023 030f 	bic.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	6811      	ldr	r1, [r2, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	6892      	ldr	r2, [r2, #8]
 8001450:	430a      	orrs	r2, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001456:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001458:	e03c      	b.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800145a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001464:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001486:	2300      	movs	r3, #0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d123      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d107      	bne.n	80014a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80014a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d112      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80014b6:	f023 030f 	bic.w	r3, r3, #15
 80014ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80014bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014be:	e009      	b.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80014d2:	e000      	b.n	80014d6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80014e2:	4618      	mov	r0, r3
 80014e4:	3764      	adds	r7, #100	@ 0x64
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	50000100 	.word	0x50000100
 80014f4:	50000300 	.word	0x50000300

080014f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d108      	bne.n	8001524 <ADC_Disable+0x2c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <ADC_Disable+0x2c>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <ADC_Disable+0x2e>
 8001524:	2300      	movs	r3, #0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d047      	beq.n	80015ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030d 	and.w	r3, r3, #13
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10f      	bne.n	8001558 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0202 	orr.w	r2, r2, #2
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2203      	movs	r2, #3
 800154e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001550:	f7ff fab0 	bl	8000ab4 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001556:	e029      	b.n	80015ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f043 0210 	orr.w	r2, r3, #16
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e023      	b.n	80015bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001574:	f7ff fa9e 	bl	8000ab4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d914      	bls.n	80015ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10d      	bne.n	80015ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f043 0210 	orr.w	r2, r3, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e007      	b.n	80015bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0dc      	beq.n	8001574 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff47 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5c 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e14e      	b.n	8001a3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8140 	beq.w	8001a38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d017      	beq.n	800186e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 809a 	beq.w	8001a38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <HAL_GPIO_Init+0x2cc>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b52      	ldr	r3, [pc, #328]	@ (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800191c:	4a50      	ldr	r2, [pc, #320]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1e0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a46      	ldr	r2, [pc, #280]	@ (8001a64 <HAL_GPIO_Init+0x2d4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a45      	ldr	r2, [pc, #276]	@ (8001a68 <HAL_GPIO_Init+0x2d8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1d8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a44      	ldr	r2, [pc, #272]	@ (8001a6c <HAL_GPIO_Init+0x2dc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1d4>
 8001960:	2303      	movs	r3, #3
 8001962:	e006      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001964:	2305      	movs	r3, #5
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001968:	2302      	movs	r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001970:	2300      	movs	r3, #0
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001982:	4937      	ldr	r1, [pc, #220]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019de:	4a24      	ldr	r2, [pc, #144]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e4:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a32:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_GPIO_Init+0x2e0>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f aea9 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f001 b823 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 817d 	beq.w	8001dda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae0:	4bbc      	ldr	r3, [pc, #752]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4bb9      	ldr	r3, [pc, #740]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d15c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001af8:	4bb6      	ldr	r3, [pc, #728]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b04:	d155      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x10e>
 8001b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	095b      	lsrs	r3, r3, #5
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x94>
 8001b32:	4ba8      	ldr	r3, [pc, #672]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0xc0>
 8001b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b3c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b50:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b68:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 811f 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8116 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f000 bfaf 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
 8001bc4:	4b83      	ldr	r3, [pc, #524]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a82      	ldr	r2, [pc, #520]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e036      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x158>
 8001be2:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7b      	ldr	r2, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a78      	ldr	r2, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e021      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x184>
 8001c0e:	4b71      	ldr	r3, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a70      	ldr	r2, [pc, #448]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x19c>
 8001c28:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a69      	ldr	r2, [pc, #420]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a66      	ldr	r2, [pc, #408]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c40:	4b64      	ldr	r3, [pc, #400]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f023 020f 	bic.w	r2, r3, #15
 8001c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	495f      	ldr	r1, [pc, #380]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d059      	beq.n	8001d1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe ff23 	bl	8000ab4 <HAL_GetTick>
 8001c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7fe ff1e 	bl	8000ab4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	@ 0x64
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 bf43 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x218>
 8001cb6:	4b47      	ldr	r3, [pc, #284]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x244>
 8001cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001cd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001cf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001cfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ab      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
 8001d1c:	e05d      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fec9 	bl	8000ab4 <HAL_GetTick>
 8001d22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d28:	f7fe fec4 	bl	8000ab4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	@ 0x64
 8001d36:	d902      	bls.n	8001d3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f000 bee9 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001d3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2cc>
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f8>
 8001d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d74:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001da0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001da4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001db0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ab      	bne.n	8001d28 <HAL_RCC_OscConfig+0x284>
 8001dd0:	e003      	b.n	8001dda <HAL_RCC_OscConfig+0x336>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 817d 	beq.w	80020ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001df0:	4ba6      	ldr	r3, [pc, #664]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dfc:	4ba3      	ldr	r3, [pc, #652]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d172      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e08:	4ba0      	ldr	r3, [pc, #640]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d16c      	bne.n	8001eee <HAL_RCC_OscConfig+0x44a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3a0>
 8001e3e:	4b93      	ldr	r3, [pc, #588]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e013      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c8>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e68:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f000 be2e 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b75      	ldr	r3, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	21f8      	movs	r1, #248	@ 0xf8
 8001eca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ed2:	fa91 f1a1 	rbit	r1, r1
 8001ed6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001eda:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001ede:	fab1 f181 	clz	r1, r1
 8001ee2:	b2c9      	uxtb	r1, r1
 8001ee4:	408b      	lsls	r3, r1
 8001ee6:	4969      	ldr	r1, [pc, #420]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eec:	e0fd      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8088 	beq.w	8002010 <HAL_RCC_OscConfig+0x56c>
 8001f00:	2301      	movs	r3, #1
 8001f02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fdc2 	bl	8000ab4 <HAL_GetTick>
 8001f30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f36:	f7fe fdbd 	bl	8000ab4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d902      	bls.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f000 bde2 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
 8001f76:	4b45      	ldr	r3, [pc, #276]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x500>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001faa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0af      	beq.n	8001f36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	21f8      	movs	r1, #248	@ 0xf8
 8001fec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ff4:	fa91 f1a1 	rbit	r1, r1
 8001ff8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ffc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002000:	fab1 f181 	clz	r1, r1
 8002004:	b2c9      	uxtb	r1, r1
 8002006:	408b      	lsls	r3, r1
 8002008:	4920      	ldr	r1, [pc, #128]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
 800200e:	e06c      	b.n	80020ea <HAL_RCC_OscConfig+0x646>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002030:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fd3a 	bl	8000ab4 <HAL_GetTick>
 8002040:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7fe fd35 	bl	8000ab4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f000 bd5a 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800206e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d104      	bne.n	8002090 <HAL_RCC_OscConfig+0x5ec>
 8002086:	4b01      	ldr	r3, [pc, #4]	@ (800208c <HAL_RCC_OscConfig+0x5e8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x614>
 800208c:	40021000 	.word	0x40021000
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020b4:	4bc8      	ldr	r3, [pc, #800]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	2202      	movs	r2, #2
 80020ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80020ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f042 0220 	orr.w	r2, r2, #32
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ad      	bne.n	8002046 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8110 	beq.w	8002320 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d079      	beq.n	8002204 <HAL_RCC_OscConfig+0x760>
 8002110:	2301      	movs	r3, #1
 8002112:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4bab      	ldr	r3, [pc, #684]	@ (80023dc <HAL_RCC_OscConfig+0x938>)
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fcbb 	bl	8000ab4 <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fcb6 	bl	8000ab4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bcdb 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002174:	2202      	movs	r2, #2
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002198:	2202      	movs	r2, #2
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	fa93 f2a3 	rbit	r2, r3
 80021aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80021b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021c0:	2102      	movs	r1, #2
 80021c2:	6019      	str	r1, [r3, #0]
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f1a3 	rbit	r1, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021da:	6019      	str	r1, [r3, #0]
  return result;
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0a0      	beq.n	8002144 <HAL_RCC_OscConfig+0x6a0>
 8002202:	e08d      	b.n	8002320 <HAL_RCC_OscConfig+0x87c>
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002230:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x938>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fc35 	bl	8000ab4 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7fe fc30 	bl	8000ab4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bc55 	b.w	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002292:	2202      	movs	r2, #2
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80022d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022de:	2102      	movs	r1, #2
 80022e0:	6019      	str	r1, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f1a3 	rbit	r1, r3
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022f8:	6019      	str	r1, [r3, #0]
  return result;
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d197      	bne.n	8002250 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 81a1 	beq.w	8002678 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d116      	bne.n	8002376 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800236e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11a      	bne.n	80023b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7fe fb91 	bl	8000ab4 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe fb8c 	bl	8000ab4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	@ 0x64
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e3b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_RCC_OscConfig+0x93c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ef      	beq.n	8002398 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <HAL_RCC_OscConfig+0x940>
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a02      	ldr	r2, [pc, #8]	@ (80023d8 <HAL_RCC_OscConfig+0x934>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e03c      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	10908120 	.word	0x10908120
 80023e0:	40007000 	.word	0x40007000
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x96a>
 80023f4:	4bc1      	ldr	r3, [pc, #772]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4ac0      	ldr	r2, [pc, #768]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4bbe      	ldr	r3, [pc, #760]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4abd      	ldr	r2, [pc, #756]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x994>
 800241e:	4bb7      	ldr	r3, [pc, #732]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4ab6      	ldr	r2, [pc, #728]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4bb4      	ldr	r3, [pc, #720]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4ab3      	ldr	r2, [pc, #716]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x9ac>
 8002438:	4bb0      	ldr	r3, [pc, #704]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4aaf      	ldr	r2, [pc, #700]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4bad      	ldr	r3, [pc, #692]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4aac      	ldr	r2, [pc, #688]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8081 	beq.w	8002564 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fb27 	bl	8000ab4 <HAL_GetTick>
 8002466:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fb22 	bl	8000ab4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e345      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0xa4c>
 80024ea:	4b84      	ldr	r3, [pc, #528]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0xa74>
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024f8:	2202      	movs	r2, #2
 80024fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	fa93 f2a3 	rbit	r2, r3
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b79      	ldr	r3, [pc, #484]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800251c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002520:	2102      	movs	r1, #2
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002528:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	fa92 f1a2 	rbit	r1, r2
 8002532:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002536:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800253a:	6011      	str	r1, [r2, #0]
  return result;
 800253c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002540:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d084      	beq.n	800246c <HAL_RCC_OscConfig+0x9c8>
 8002562:	e07f      	b.n	8002664 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe faa6 	bl	8000ab4 <HAL_GetTick>
 8002568:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe faa1 	bl	8000ab4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e2c4      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025b2:	2202      	movs	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025cc:	601a      	str	r2, [r3, #0]
  return result;
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80025d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0xb4e>
 80025ec:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	e013      	b.n	800261a <HAL_RCC_OscConfig+0xb76>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800261e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002622:	2102      	movs	r1, #2
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800262a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002638:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800263c:	6011      	str	r1, [r2, #0]
  return result;
 800263e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002642:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d184      	bne.n	800256e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002664:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8242 	beq.w	8002b0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800268a:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <HAL_RCC_OscConfig+0xc58>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	f000 8213 	beq.w	8002abe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 8162 	bne.w	800296e <HAL_RCC_OscConfig+0xeca>
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026ce:	601a      	str	r2, [r3, #0]
  return result;
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80026d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe f9e0 	bl	8000ab4 <HAL_GetTick>
 80026f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0xc70>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe f9d8 	bl	8000ab4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1fd      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800271c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002738:	601a      	str	r2, [r3, #0]
  return result;
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002742:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_RCC_OscConfig+0xcba>
 8002758:	4bb0      	ldr	r3, [pc, #704]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	e027      	b.n	80027ae <HAL_RCC_OscConfig+0xd0a>
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002766:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800278c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b9c      	ldr	r3, [pc, #624]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	fa92 f1a2 	rbit	r1, r2
 80027ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027d2:	6011      	str	r1, [r2, #0]
  return result;
 80027d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d182      	bne.n	8002700 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fa:	4b88      	ldr	r3, [pc, #544]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	430b      	orrs	r3, r1
 800281c:	497f      	ldr	r1, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800282a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800282e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002850:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800285c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f924 	bl	8000ab4 <HAL_GetTick>
 800286c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe f91f 	bl	8000ab4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e144      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800288e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_OscConfig+0xe2c>
 80028ca:	4b54      	ldr	r3, [pc, #336]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e027      	b.n	8002920 <HAL_RCC_OscConfig+0xe7c>
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002924:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002928:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800292c:	6011      	str	r1, [r2, #0]
 800292e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002932:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fa92 f1a2 	rbit	r1, r2
 800293c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002940:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002944:	6011      	str	r1, [r2, #0]
  return result;
 8002946:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800294a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d082      	beq.n	8002872 <HAL_RCC_OscConfig+0xdce>
 800296c:	e0cf      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002976:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800297a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002992:	601a      	str	r2, [r3, #0]
  return result;
 8002994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002998:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800299c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	2300      	movs	r3, #0
 80029b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe f87e 	bl	8000ab4 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe f879 	bl	8000ab4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e09e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d104      	bne.n	8002a20 <HAL_RCC_OscConfig+0xf7c>
 8002a16:	4b01      	ldr	r3, [pc, #4]	@ (8002a1c <HAL_RCC_OscConfig+0xf78>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e029      	b.n	8002a70 <HAL_RCC_OscConfig+0xfcc>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a74:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a7c:	6011      	str	r1, [r2, #0]
 8002a7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a82:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a90:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a94:	6011      	str	r1, [r2, #0]
  return result;
 8002a96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0220 	orr.w	r2, r2, #32
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d180      	bne.n	80029be <HAL_RCC_OscConfig+0xf1a>
 8002abc:	e027      	b.n	8002b0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01e      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_OscConfig+0x1078>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ada:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ade:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b09e      	sub	sp, #120	@ 0x78
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e162      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b90      	ldr	r3, [pc, #576]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b8d      	ldr	r3, [pc, #564]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	498b      	ldr	r1, [pc, #556]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b89      	ldr	r3, [pc, #548]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e14a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b82      	ldr	r3, [pc, #520]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	497f      	ldr	r1, [pc, #508]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 80dc 	beq.w	8002d4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13c      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xf6>
 8002b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xa6>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCC_ClockConfig+0xc6>
 8002bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002bf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d17b      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0f3      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d13c      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x178>
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x128>
 8002c42:	4b4f      	ldr	r3, [pc, #316]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_ClockConfig+0x148>
 8002c48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c64:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13a      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1a0>
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e00d      	b.n	8002cdc <HAL_RCC_ClockConfig+0x1bc>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	4b29      	ldr	r3, [pc, #164]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	2202      	movs	r2, #2
 8002cde:	61ba      	str	r2, [r7, #24]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	617a      	str	r2, [r7, #20]
  return result;
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e079      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	491a      	ldr	r1, [pc, #104]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7fd feca 	bl	8000ab4 <HAL_GetTick>
 8002d20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7fd fec6 	bl	8000ab4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e061      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d214      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <HAL_RCC_ClockConfig+0x25c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e040      	b.n	8002dfe <HAL_RCC_ClockConfig+0x2de>
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	491a      	ldr	r1, [pc, #104]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4912      	ldr	r1, [pc, #72]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dc2:	f000 f829 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_RCC_ClockConfig+0x2e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd0:	22f0      	movs	r2, #240	@ 0xf0
 8002dd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	60fa      	str	r2, [r7, #12]
  return result;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	40d3      	lsrs	r3, r2
 8002de6:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <HAL_RCC_ClockConfig+0x2ec>)
 8002de8:	5cd3      	ldrb	r3, [r2, r3]
 8002dea:	fa21 f303 	lsr.w	r3, r1, r3
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <HAL_RCC_ClockConfig+0x2f0>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <HAL_RCC_ClockConfig+0x2f4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fe18 	bl	8000a2c <HAL_InitTick>
  
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3778      	adds	r7, #120	@ 0x78
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003b70 	.word	0x08003b70
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x94>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x30>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x36>
 8002e46:	e026      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4a:	613b      	str	r3, [r7, #16]
      break;
 8002e4c:	e026      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e58:	5cd3      	ldrb	r3, [r2, r3]
 8002e5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e74:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e004      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
      break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e98:	613b      	str	r3, [r7, #16]
      break;
 8002e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9c:	693b      	ldr	r3, [r7, #16]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	007a1200 	.word	0x007a1200
 8002eb4:	08003b80 	.word	0x08003b80
 8002eb8:	08003b90 	.word	0x08003b90
 8002ebc:	003d0900 	.word	0x003d0900

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b092      	sub	sp, #72	@ 0x48
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80cd 	beq.w	800307e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b86      	ldr	r3, [pc, #536]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10e      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b83      	ldr	r3, [pc, #524]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a82      	ldr	r2, [pc, #520]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b80      	ldr	r3, [pc, #512]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a79      	ldr	r2, [pc, #484]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fd fdc5 	bl	8000ab4 <HAL_GetTick>
 8002f2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fd fdc1 	bl	8000ab4 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	@ 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0db      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b70      	ldr	r3, [pc, #448]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d07d      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d076      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f6a:	4b65      	ldr	r3, [pc, #404]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f78:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fbc:	4a50      	ldr	r2, [pc, #320]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d045      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fd72 	bl	8000ab4 <HAL_GetTick>
 8002fd0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fd fd6e 	bl	8000ab4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e086      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002fea:	2302      	movs	r3, #2
 8002fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	623b      	str	r3, [r7, #32]
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	61fb      	str	r3, [r7, #28]
  return result;
 8003002:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d102      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003018:	4b39      	ldr	r3, [pc, #228]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	e007      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b35      	ldr	r3, [pc, #212]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	2202      	movs	r2, #2
 8003030:	613a      	str	r2, [r7, #16]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	60fa      	str	r2, [r7, #12]
  return result;
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f002 021f 	and.w	r2, r2, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f202 	lsl.w	r2, r1, r2
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0bd      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003058:	4b29      	ldr	r3, [pc, #164]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4926      	ldr	r1, [pc, #152]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003066:	4313      	orrs	r3, r2
 8003068:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800306a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b23      	ldr	r3, [pc, #140]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308a:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	491a      	ldr	r1, [pc, #104]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003098:	4313      	orrs	r3, r2
 800309a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a8:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f023 0210 	bic.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4912      	ldr	r1, [pc, #72]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	490b      	ldr	r1, [pc, #44]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4903      	ldr	r1, [pc, #12]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3748      	adds	r7, #72	@ 0x48
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	40007000 	.word	0x40007000
 8003108:	10908100 	.word	0x10908100

0800310c <LL_GPIO_SetPinMode>:
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	613b      	str	r3, [r7, #16]
  return result;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2103      	movs	r1, #3
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	61bb      	str	r3, [r7, #24]
  return result;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	3724      	adds	r7, #36	@ 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_GPIO_SetPinOutputType>:
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_GPIO_SetPinSpeed>:
{
 800319a:	b480      	push	{r7}
 800319c:	b089      	sub	sp, #36	@ 0x24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	613b      	str	r3, [r7, #16]
  return result;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2103      	movs	r1, #3
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	401a      	ands	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	61bb      	str	r3, [r7, #24]
  return result;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	3724      	adds	r7, #36	@ 0x24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_GPIO_SetPinPull>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
  return result;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2103      	movs	r1, #3
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	61bb      	str	r3, [r7, #24]
  return result;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	60da      	str	r2, [r3, #12]
}
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_GPIO_SetAFPin_0_7>:
{
 8003256:	b480      	push	{r7}
 8003258:	b089      	sub	sp, #36	@ 0x24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	613b      	str	r3, [r7, #16]
  return result;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	210f      	movs	r1, #15
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	401a      	ands	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	61bb      	str	r3, [r7, #24]
  return result;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	431a      	orrs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	621a      	str	r2, [r3, #32]
}
 80032a8:	bf00      	nop
 80032aa:	3724      	adds	r7, #36	@ 0x24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_GPIO_SetAFPin_8_15>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	613b      	str	r3, [r7, #16]
  return result;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	210f      	movs	r1, #15
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	401a      	ands	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61bb      	str	r3, [r7, #24]
  return result;
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	@ 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b088      	sub	sp, #32
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
  return result;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003338:	e051      	b.n	80033de <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d043      	beq.n	80033d8 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d003      	beq.n	8003360 <LL_GPIO_Init+0x4a>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d10e      	bne.n	800337e <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	461a      	mov	r2, r3
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff16 	bl	800319a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	461a      	mov	r2, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fef6 	bl	800316a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	461a      	mov	r2, r3
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff36 	bl	80031f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d11a      	bne.n	80033ca <LL_GPIO_Init+0xb4>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	60bb      	str	r3, [r7, #8]
  return result;
 80033a0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d807      	bhi.n	80033bc <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	461a      	mov	r2, r3
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff4e 	bl	8003256 <LL_GPIO_SetAFPin_0_7>
 80033ba:	e006      	b.n	80033ca <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	461a      	mov	r2, r3
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff75 	bl	80032b4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	461a      	mov	r2, r3
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fe9a 	bl	800310c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3301      	adds	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1a6      	bne.n	800333a <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <LL_SPI_IsEnabled>:
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003406:	2b40      	cmp	r3, #64	@ 0x40
 8003408:	d101      	bne.n	800340e <LL_SPI_IsEnabled+0x18>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_SPI_IsEnabled+0x1a>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_SPI_SetRxFIFOThreshold>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	605a      	str	r2, [r3, #4]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_SPI_SetCRCPolynomial>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffc0 	bl	80033f6 <LL_SPI_IsEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d145      	bne.n	8003508 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003484:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	6852      	ldr	r2, [r2, #4]
 8003490:	4311      	orrs	r1, r2
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68d2      	ldr	r2, [r2, #12]
 8003496:	4311      	orrs	r1, r2
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	6912      	ldr	r2, [r2, #16]
 800349c:	4311      	orrs	r1, r2
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	6952      	ldr	r2, [r2, #20]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	6992      	ldr	r2, [r2, #24]
 80034a8:	4311      	orrs	r1, r2
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	69d2      	ldr	r2, [r2, #28]
 80034ae:	4311      	orrs	r1, r2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	6a12      	ldr	r2, [r2, #32]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6891      	ldr	r1, [r2, #8]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	6952      	ldr	r2, [r2, #20]
 80034d0:	0c12      	lsrs	r2, r2, #16
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e2:	d204      	bcs.n	80034ee <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80034e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff97 	bl	800341c <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f6:	d105      	bne.n	8003504 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff9f 	bl	8003442 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <LL_mDelay+0x48>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003522:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800352a:	d00c      	beq.n	8003546 <LL_mDelay+0x32>
  {
    Delay++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3301      	adds	r3, #1
 8003530:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003532:	e008      	b.n	8003546 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003534:	4b09      	ldr	r3, [pc, #36]	@ (800355c <LL_mDelay+0x48>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <LL_mDelay+0x32>
    {
      Delay--;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f3      	bne.n	8003534 <LL_mDelay+0x20>
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	reset_res();
 8003564:	f7fd f9b2 	bl	80008cc <reset_res>
	LL_mDelay(100);
 8003568:	2064      	movs	r0, #100	@ 0x64
 800356a:	f7ff ffd3 	bl	8003514 <LL_mDelay>

	set_res();
 800356e:	f7fd f9a3 	bl	80008b8 <set_res>
	LL_mDelay(100);
 8003572:	2064      	movs	r0, #100	@ 0x64
 8003574:	f7ff ffce 	bl	8003514 <LL_mDelay>
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
	reset_cd();
 8003586:	f7fd f985 	bl	8000894 <reset_cd>
	reset_cs();
 800358a:	f7fd f967 	bl	800085c <reset_cs>
	readWriteSPI1(address);
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f92f 	bl	80007f4 <readWriteSPI1>
	set_cs();
 8003596:	f7fd f957 	bl	8000848 <set_cs>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
	set_cd();
 80035ac:	f7fd f968 	bl	8000880 <set_cd>
	reset_cs();
 80035b0:	f7fd f954 	bl	800085c <reset_cs>
	readWriteSPI1(parameter);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd f91c 	bl	80007f4 <readWriteSPI1>
	set_cs();
 80035bc:	f7fd f944 	bl	8000848 <set_cs>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	460a      	mov	r2, r1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71bb      	strb	r3, [r7, #6]
	set_cd();
 80035d8:	f7fd f952 	bl	8000880 <set_cd>
	reset_cs();
 80035dc:	f7fd f93e 	bl	800085c <reset_cs>
	readWriteSPI1(dataByte1);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd f906 	bl	80007f4 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 80035e8:	79bb      	ldrb	r3, [r7, #6]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd f902 	bl	80007f4 <readWriteSPI1>
	set_cs();
 80035f0:	f7fd f92a 	bl	8000848 <set_cs>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD

	initCD_Pin();
 8003606:	f7fd f933 	bl	8000870 <initCD_Pin>
	initCS_Pin();
 800360a:	f7fd f917 	bl	800083c <initCS_Pin>
	initRES_Pin();
 800360e:	f7fd f94b 	bl	80008a8 <initRES_Pin>

	LL_mDelay(50);
 8003612:	2032      	movs	r0, #50	@ 0x32
 8003614:	f7ff ff7e 	bl	8003514 <LL_mDelay>

	// Hardware reset the LCD
	lcdReset();
 8003618:	f7ff ffa2 	bl	8003560 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 800361c:	2011      	movs	r0, #17
 800361e:	f7ff ffad 	bl	800357c <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8003622:	2064      	movs	r0, #100	@ 0x64
 8003624:	f7ff ff76 	bl	8003514 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8003628:	203a      	movs	r0, #58	@ 0x3a
 800362a:	f7ff ffa7 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 800362e:	2005      	movs	r0, #5
 8003630:	f7ff ffb7 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8003634:	2026      	movs	r0, #38	@ 0x26
 8003636:	f7ff ffa1 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 800363a:	2004      	movs	r0, #4
 800363c:	f7ff ffb1 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8003640:	20f2      	movs	r0, #242	@ 0xf2
 8003642:	f7ff ff9b 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8003646:	2001      	movs	r0, #1
 8003648:	f7ff ffab 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 800364c:	20e0      	movs	r0, #224	@ 0xe0
 800364e:	f7ff ff95 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8003652:	203f      	movs	r0, #63	@ 0x3f
 8003654:	f7ff ffa5 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8003658:	2025      	movs	r0, #37	@ 0x25
 800365a:	f7ff ffa2 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 800365e:	201c      	movs	r0, #28
 8003660:	f7ff ff9f 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8003664:	201e      	movs	r0, #30
 8003666:	f7ff ff9c 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 800366a:	2020      	movs	r0, #32
 800366c:	f7ff ff99 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8003670:	2012      	movs	r0, #18
 8003672:	f7ff ff96 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8003676:	202a      	movs	r0, #42	@ 0x2a
 8003678:	f7ff ff93 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 800367c:	2090      	movs	r0, #144	@ 0x90
 800367e:	f7ff ff90 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8003682:	2024      	movs	r0, #36	@ 0x24
 8003684:	f7ff ff8d 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8003688:	2011      	movs	r0, #17
 800368a:	f7ff ff8a 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 800368e:	2000      	movs	r0, #0
 8003690:	f7ff ff87 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8003694:	2000      	movs	r0, #0
 8003696:	f7ff ff84 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff ff81 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7ff ff7e 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7ff ff7b 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80036ac:	20e1      	movs	r0, #225	@ 0xe1
 80036ae:	f7ff ff65 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 80036b2:	2020      	movs	r0, #32
 80036b4:	f7ff ff75 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80036b8:	2020      	movs	r0, #32
 80036ba:	f7ff ff72 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 80036be:	2020      	movs	r0, #32
 80036c0:	f7ff ff6f 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80036c4:	2020      	movs	r0, #32
 80036c6:	f7ff ff6c 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80036ca:	2005      	movs	r0, #5
 80036cc:	f7ff ff69 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7ff ff66 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80036d6:	2015      	movs	r0, #21
 80036d8:	f7ff ff63 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80036dc:	20a7      	movs	r0, #167	@ 0xa7
 80036de:	f7ff ff60 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80036e2:	203d      	movs	r0, #61	@ 0x3d
 80036e4:	f7ff ff5d 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 80036e8:	2018      	movs	r0, #24
 80036ea:	f7ff ff5a 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 80036ee:	2025      	movs	r0, #37	@ 0x25
 80036f0:	f7ff ff57 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 80036f4:	202a      	movs	r0, #42	@ 0x2a
 80036f6:	f7ff ff54 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 80036fa:	202b      	movs	r0, #43	@ 0x2b
 80036fc:	f7ff ff51 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8003700:	202b      	movs	r0, #43	@ 0x2b
 8003702:	f7ff ff4e 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8003706:	203a      	movs	r0, #58	@ 0x3a
 8003708:	f7ff ff4b 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 800370c:	20b1      	movs	r0, #177	@ 0xb1
 800370e:	f7ff ff35 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8003712:	2008      	movs	r0, #8
 8003714:	f7ff ff45 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8003718:	2008      	movs	r0, #8
 800371a:	f7ff ff42 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 800371e:	20b4      	movs	r0, #180	@ 0xb4
 8003720:	f7ff ff2c 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8003724:	2007      	movs	r0, #7
 8003726:	f7ff ff3c 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 800372a:	20c0      	movs	r0, #192	@ 0xc0
 800372c:	f7ff ff26 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8003730:	200a      	movs	r0, #10
 8003732:	f7ff ff36 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8003736:	2002      	movs	r0, #2
 8003738:	f7ff ff33 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 800373c:	20c1      	movs	r0, #193	@ 0xc1
 800373e:	f7ff ff1d 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8003742:	2002      	movs	r0, #2
 8003744:	f7ff ff2d 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8003748:	20c5      	movs	r0, #197	@ 0xc5
 800374a:	f7ff ff17 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 800374e:	2050      	movs	r0, #80	@ 0x50
 8003750:	f7ff ff27 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8003754:	205b      	movs	r0, #91	@ 0x5b
 8003756:	f7ff ff24 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 800375a:	20c7      	movs	r0, #199	@ 0xc7
 800375c:	f7ff ff0e 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8003760:	2040      	movs	r0, #64	@ 0x40
 8003762:	f7ff ff1e 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8003766:	202a      	movs	r0, #42	@ 0x2a
 8003768:	f7ff ff08 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff ff18 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8003772:	2000      	movs	r0, #0
 8003774:	f7ff ff15 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8003778:	2000      	movs	r0, #0
 800377a:	f7ff ff12 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 800377e:	207f      	movs	r0, #127	@ 0x7f
 8003780:	f7ff ff0f 	bl	80035a2 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8003784:	202b      	movs	r0, #43	@ 0x2b
 8003786:	f7ff fef9 	bl	800357c <lcdWriteCommand>
    lcdWriteParameter(0x00);
 800378a:	2000      	movs	r0, #0
 800378c:	f7ff ff09 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7ff ff06 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8003796:	2000      	movs	r0, #0
 8003798:	f7ff ff03 	bl	80035a2 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 800379c:	207f      	movs	r0, #127	@ 0x7f
 800379e:	f7ff ff00 	bl	80035a2 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 80037a2:	2036      	movs	r0, #54	@ 0x36
 80037a4:	f7ff feea 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(orientation);
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fef9 	bl	80035a2 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 80037b0:	2029      	movs	r0, #41	@ 0x29
 80037b2:	f7ff fee3 	bl	800357c <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 80037b6:	202c      	movs	r0, #44	@ 0x2c
 80037b8:	f7ff fee0 	bl	800357c <lcdWriteCommand>

    lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	2000      	movs	r0, #0
 80037c2:	f000 f919 	bl	80039f8 <decodeRgbValue>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f804 	bl	80037d6 <lcdClearDisplay>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80037e0:	202a      	movs	r0, #42	@ 0x2a
 80037e2:	f7ff fecb 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80037e6:	2000      	movs	r0, #0
 80037e8:	f7ff fedb 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7ff fed8 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7ff fed5 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80037f8:	207f      	movs	r0, #127	@ 0x7f
 80037fa:	f7ff fed2 	bl	80035a2 <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80037fe:	202b      	movs	r0, #43	@ 0x2b
 8003800:	f7ff febc 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff fecc 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff fec9 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003810:	2000      	movs	r0, #0
 8003812:	f7ff fec6 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8003816:	207f      	movs	r0, #127	@ 0x7f
 8003818:	f7ff fec3 	bl	80035a2 <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 800381c:	202c      	movs	r0, #44	@ 0x2c
 800381e:	f7ff fead 	bl	800357c <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++)
 8003822:	2300      	movs	r3, #0
 8003824:	81fb      	strh	r3, [r7, #14]
 8003826:	e00c      	b.n	8003842 <lcdClearDisplay+0x6c>
	{
		lcdWriteData(colour >> 8, colour);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fec6 	bl	80035c8 <lcdWriteData>
	for(pixel = 0; pixel < 16385; pixel++)
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	3301      	adds	r3, #1
 8003840:	81fb      	strh	r3, [r7, #14]
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003848:	d9ee      	bls.n	8003828 <lcdClearDisplay+0x52>
	}
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <lcdFilledRectangle>:

// Draw a filled rectangle
// Note:	y1 must be greater than y0  and x1 must be greater than x0
//			for this to work
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	80fb      	strh	r3, [r7, #6]
 8003866:	4603      	mov	r3, r0
 8003868:	80bb      	strh	r3, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	807b      	strh	r3, [r7, #2]
 800386e:	4613      	mov	r3, r2
 8003870:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8003872:	202a      	movs	r0, #42	@ 0x2a
 8003874:	f7ff fe82 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7ff fe92 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(x0);
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fe8d 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff fe8a 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(x1);
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fe85 	bl	80035a2 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8003898:	202b      	movs	r0, #43	@ 0x2b
 800389a:	f7ff fe6f 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800389e:	2000      	movs	r0, #0
 80038a0:	f7ff fe7f 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(y0);
 80038a4:	88bb      	ldrh	r3, [r7, #4]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fe7a 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7ff fe77 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(y1);
 80038b4:	883b      	ldrh	r3, [r7, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe72 	bl	80035a2 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 80038be:	202c      	movs	r0, #44	@ 0x2c
 80038c0:	f7ff fe5c 	bl	800357c <lcdWriteCommand>

	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	81fb      	strh	r3, [r7, #14]
 80038c8:	e00c      	b.n	80038e4 <lcdFilledRectangle+0x90>
		lcdWriteData(colour >> 8, colour);;
 80038ca:	8c3b      	ldrh	r3, [r7, #32]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	8c3a      	ldrh	r2, [r7, #32]
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fe75 	bl	80035c8 <lcdWriteData>
	for (pixels = 0; pixels < ((x1 - x0) * (y1 - y0)); pixels++)
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	3301      	adds	r3, #1
 80038e2:	81fb      	strh	r3, [r7, #14]
 80038e4:	89fa      	ldrh	r2, [r7, #14]
 80038e6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80038ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	f9b7 0000 	ldrsh.w	r0, [r7]
 80038f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038f8:	1a41      	subs	r1, r0, r1
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbe3      	blt.n	80038ca <lcdFilledRectangle+0x76>
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}

0800390c <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4623      	mov	r3, r4
 800391c:	71fb      	strb	r3, [r7, #7]
 800391e:	4603      	mov	r3, r0
 8003920:	71bb      	strb	r3, [r7, #6]
 8003922:	460b      	mov	r3, r1
 8003924:	717b      	strb	r3, [r7, #5]
 8003926:	4613      	mov	r3, r2
 8003928:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800392a:	202a      	movs	r0, #42	@ 0x2a
 800392c:	f7ff fe26 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003930:	2000      	movs	r0, #0
 8003932:	f7ff fe36 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(x);
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe32 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800393e:	2000      	movs	r0, #0
 8003940:	f7ff fe2f 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8003944:	79bb      	ldrb	r3, [r7, #6]
 8003946:	3305      	adds	r3, #5
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fe29 	bl	80035a2 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8003950:	202b      	movs	r0, #43	@ 0x2b
 8003952:	f7ff fe13 	bl	800357c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003956:	2000      	movs	r0, #0
 8003958:	f7ff fe23 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(y);
 800395c:	797b      	ldrb	r3, [r7, #5]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fe1f 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7ff fe1c 	bl	80035a2 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 800396a:	207f      	movs	r0, #127	@ 0x7f
 800396c:	f7ff fe19 	bl	80035a2 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8003970:	202c      	movs	r0, #44	@ 0x2c
 8003972:	f7ff fe03 	bl	800357c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e032      	b.n	80039e2 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 800397c:	2300      	movs	r3, #0
 800397e:	73bb      	strb	r3, [r7, #14]
 8003980:	e029      	b.n	80039d6 <lcdPutCh+0xca>
		{
			//if ((font5x8[character][column]) & (1 << row))
			if ((fontus[character][column]) & (1 << row))
 8003982:	79fa      	ldrb	r2, [r7, #7]
 8003984:	7bb9      	ldrb	r1, [r7, #14]
 8003986:	481b      	ldr	r0, [pc, #108]	@ (80039f4 <lcdPutCh+0xe8>)
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4403      	add	r3, r0
 8003992:	440b      	add	r3, r1
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	fa42 f303 	asr.w	r3, r2, r3
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fe07 	bl	80035c8 <lcdWriteData>
 80039ba:	e009      	b.n	80039d0 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 80039bc:	8c3b      	ldrh	r3, [r7, #32]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	8c3a      	ldrh	r2, [r7, #32]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fdfc 	bl	80035c8 <lcdWriteData>
		for (column = 0; column < 6; column++)
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73bb      	strb	r3, [r7, #14]
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d9d2      	bls.n	8003982 <lcdPutCh+0x76>
	for (row = 0; row < 8; row++)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3301      	adds	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	d9c9      	bls.n	800397c <lcdPutCh+0x70>
		}
	}
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08003ba0 	.word	0x08003ba0

080039f8 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
 8003a02:	460b      	mov	r3, r1
 8003a04:	71bb      	strb	r3, [r7, #6]
 8003a06:	4613      	mov	r3, r2
 8003a08:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8003a0a:	797b      	ldrb	r3, [r7, #5]
 8003a0c:	02db      	lsls	r3, r3, #11
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	79bb      	ldrb	r3, [r7, #6]
 8003a12:	019b      	lsls	r3, r3, #6
 8003a14:	b21b      	sxth	r3, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	b29b      	uxth	r3, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	0052      	lsls	r2, r2, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	71fb      	strb	r3, [r7, #7]
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8003a6e:	b590      	push	{r4, r7, lr}
 8003a70:	b087      	sub	sp, #28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	4608      	mov	r0, r1
 8003a78:	4611      	mov	r1, r2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	70fb      	strb	r3, [r7, #3]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70bb      	strb	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e01c      	b.n	8003acc <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	2b79      	cmp	r3, #121	@ 0x79
 8003a96:	d904      	bls.n	8003aa2 <lcdPutS+0x34>
		{
			x = origin;
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8003a9c:	78bb      	ldrb	r3, [r7, #2]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8003aa2:	78bb      	ldrb	r3, [r7, #2]
 8003aa4:	2b78      	cmp	r3, #120	@ 0x78
 8003aa6:	d819      	bhi.n	8003adc <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	7818      	ldrb	r0, [r3, #0]
 8003ab0:	883c      	ldrh	r4, [r7, #0]
 8003ab2:	78ba      	ldrb	r2, [r7, #2]
 8003ab4:	78f9      	ldrb	r1, [r7, #3]
 8003ab6:	8c3b      	ldrh	r3, [r7, #32]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7ff ff26 	bl	800390c <lcdPutCh>
		x += 6;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	3306      	adds	r3, #6
 8003ac4:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
 8003acc:	7bfc      	ldrb	r4, [r7, #15]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc fb7a 	bl	80001c8 <strlen>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	d3db      	bcc.n	8003a92 <lcdPutS+0x24>
	}
}
 8003ada:	e000      	b.n	8003ade <lcdPutS+0x70>
		if (y > 120) break;
 8003adc:	bf00      	nop
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}

08003ae6 <memset>:
 8003ae6:	4402      	add	r2, r0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d100      	bne.n	8003af0 <memset+0xa>
 8003aee:	4770      	bx	lr
 8003af0:	f803 1b01 	strb.w	r1, [r3], #1
 8003af4:	e7f9      	b.n	8003aea <memset+0x4>
	...

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	@ (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	@ (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f000 f818 	bl	8003b40 <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08003ea8 	.word	0x08003ea8
 8003b34:	08003ea8 	.word	0x08003ea8
 8003b38:	08003ea8 	.word	0x08003ea8
 8003b3c:	08003eac 	.word	0x08003eac

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
